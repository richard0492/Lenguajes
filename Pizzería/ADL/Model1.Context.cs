//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Entities
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class BDRestauranteProyectoLenguajesEntities : DbContext
    {
        public BDRestauranteProyectoLenguajesEntities()
            : base("name=BDRestauranteProyectoLenguajesEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<EstadoOrden> EstadoOrden { get; set; }
        public virtual DbSet<LineaOrden> LineaOrden { get; set; }
        public virtual DbSet<Orden> Orden { get; set; }
        public virtual DbSet<Party> Party { get; set; }
        public virtual DbSet<Plato> Plato { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<TipoParty> TipoParty { get; set; }
        public virtual DbSet<View_users> View_users { get; set; }
    
        public virtual int PROC_AGREGAR_ORDEN(string email, Nullable<System.DateTime> fecha, Nullable<decimal> total, ObjectParameter ordenID)
        {
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(System.DateTime));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("total", total) :
                new ObjectParameter("total", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PROC_AGREGAR_ORDEN", emailParameter, fechaParameter, totalParameter, ordenID);
        }
    
        public virtual ObjectResult<PROC_ALL_ORDERS_Result> PROC_ALL_ORDERS(Nullable<int> n)
        {
            var nParameter = n.HasValue ?
                new ObjectParameter("N", n) :
                new ObjectParameter("N", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PROC_ALL_ORDERS_Result>("PROC_ALL_ORDERS", nParameter);
        }
    
        public virtual ObjectResult<PROC_BUSCAR_NOMBRE_PLATO_Result> PROC_BUSCAR_NOMBRE_PLATO(string nombreBuscar)
        {
            var nombreBuscarParameter = nombreBuscar != null ?
                new ObjectParameter("NombreBuscar", nombreBuscar) :
                new ObjectParameter("NombreBuscar", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PROC_BUSCAR_NOMBRE_PLATO_Result>("PROC_BUSCAR_NOMBRE_PLATO", nombreBuscarParameter);
        }
    
        public virtual int PROC_CHANGE_STATE(Nullable<int> ordenID, Nullable<int> estadoID)
        {
            var ordenIDParameter = ordenID.HasValue ?
                new ObjectParameter("ordenID", ordenID) :
                new ObjectParameter("ordenID", typeof(int));
    
            var estadoIDParameter = estadoID.HasValue ?
                new ObjectParameter("estadoID", estadoID) :
                new ObjectParameter("estadoID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PROC_CHANGE_STATE", ordenIDParameter, estadoIDParameter);
        }
    
        public virtual ObjectResult<PROC_FILTER_ORDERS_BY_DATE_Result> PROC_FILTER_ORDERS_BY_DATE(Nullable<System.DateTime> firstDate, Nullable<System.DateTime> secondDate)
        {
            var firstDateParameter = firstDate.HasValue ?
                new ObjectParameter("firstDate", firstDate) :
                new ObjectParameter("firstDate", typeof(System.DateTime));
    
            var secondDateParameter = secondDate.HasValue ?
                new ObjectParameter("secondDate", secondDate) :
                new ObjectParameter("secondDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PROC_FILTER_ORDERS_BY_DATE_Result>("PROC_FILTER_ORDERS_BY_DATE", firstDateParameter, secondDateParameter);
        }
    
        public virtual ObjectResult<PROC_FILTER_ORDERS_BY_DATE_STATE_Result> PROC_FILTER_ORDERS_BY_DATE_STATE(Nullable<System.DateTime> firstDate, Nullable<System.DateTime> secondDate, Nullable<int> state)
        {
            var firstDateParameter = firstDate.HasValue ?
                new ObjectParameter("firstDate", firstDate) :
                new ObjectParameter("firstDate", typeof(System.DateTime));
    
            var secondDateParameter = secondDate.HasValue ?
                new ObjectParameter("secondDate", secondDate) :
                new ObjectParameter("secondDate", typeof(System.DateTime));
    
            var stateParameter = state.HasValue ?
                new ObjectParameter("state", state) :
                new ObjectParameter("state", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PROC_FILTER_ORDERS_BY_DATE_STATE_Result>("PROC_FILTER_ORDERS_BY_DATE_STATE", firstDateParameter, secondDateParameter, stateParameter);
        }
    
        public virtual ObjectResult<PROC_FILTER_ORDERS_BY_EMAIL_Result> PROC_FILTER_ORDERS_BY_EMAIL(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PROC_FILTER_ORDERS_BY_EMAIL_Result>("PROC_FILTER_ORDERS_BY_EMAIL", emailParameter);
        }
    
        public virtual ObjectResult<PROC_FILTER_ORDERS_BY_EMAIL_DATE_Result> PROC_FILTER_ORDERS_BY_EMAIL_DATE(string email, Nullable<System.DateTime> firstDate, Nullable<System.DateTime> secondDate)
        {
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var firstDateParameter = firstDate.HasValue ?
                new ObjectParameter("firstDate", firstDate) :
                new ObjectParameter("firstDate", typeof(System.DateTime));
    
            var secondDateParameter = secondDate.HasValue ?
                new ObjectParameter("secondDate", secondDate) :
                new ObjectParameter("secondDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PROC_FILTER_ORDERS_BY_EMAIL_DATE_Result>("PROC_FILTER_ORDERS_BY_EMAIL_DATE", emailParameter, firstDateParameter, secondDateParameter);
        }
    
        public virtual ObjectResult<PROC_FILTER_ORDERS_BY_EMAIL_DATE_STATE_Result> PROC_FILTER_ORDERS_BY_EMAIL_DATE_STATE(string email, Nullable<System.DateTime> firstDate, Nullable<System.DateTime> secondDate, Nullable<int> estateID)
        {
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var firstDateParameter = firstDate.HasValue ?
                new ObjectParameter("firstDate", firstDate) :
                new ObjectParameter("firstDate", typeof(System.DateTime));
    
            var secondDateParameter = secondDate.HasValue ?
                new ObjectParameter("secondDate", secondDate) :
                new ObjectParameter("secondDate", typeof(System.DateTime));
    
            var estateIDParameter = estateID.HasValue ?
                new ObjectParameter("estateID", estateID) :
                new ObjectParameter("estateID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PROC_FILTER_ORDERS_BY_EMAIL_DATE_STATE_Result>("PROC_FILTER_ORDERS_BY_EMAIL_DATE_STATE", emailParameter, firstDateParameter, secondDateParameter, estateIDParameter);
        }
    
        public virtual ObjectResult<PROC_FILTER_ORDERS_BY_EMAIL_STATE_Result> PROC_FILTER_ORDERS_BY_EMAIL_STATE(string email, Nullable<int> estateID)
        {
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var estateIDParameter = estateID.HasValue ?
                new ObjectParameter("estateID", estateID) :
                new ObjectParameter("estateID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PROC_FILTER_ORDERS_BY_EMAIL_STATE_Result>("PROC_FILTER_ORDERS_BY_EMAIL_STATE", emailParameter, estateIDParameter);
        }
    
        public virtual ObjectResult<PROC_FILTER_ORDERS_BY_STATE_Result> PROC_FILTER_ORDERS_BY_STATE(Nullable<int> estateID)
        {
            var estateIDParameter = estateID.HasValue ?
                new ObjectParameter("estateID", estateID) :
                new ObjectParameter("estateID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PROC_FILTER_ORDERS_BY_STATE_Result>("PROC_FILTER_ORDERS_BY_STATE", estateIDParameter);
        }
    
        public virtual ObjectResult<PROC_GET_PLATE_Result> PROC_GET_PLATE(string name, Nullable<int> price)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PROC_GET_PLATE_Result>("PROC_GET_PLATE", nameParameter, priceParameter);
        }
    
        public virtual ObjectResult<PROC_KITCHEN_ORDERS_Result> PROC_KITCHEN_ORDERS(Nullable<int> n)
        {
            var nParameter = n.HasValue ?
                new ObjectParameter("N", n) :
                new ObjectParameter("N", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PROC_KITCHEN_ORDERS_Result>("PROC_KITCHEN_ORDERS", nParameter);
        }
    
        public virtual int PROC_MODIFICAR_PLATO(Nullable<int> platoID, string nombre, string descripcion, Nullable<decimal> precio, byte[] fotografia, string habilitado, Nullable<byte> tiempoPreparacion)
        {
            var platoIDParameter = platoID.HasValue ?
                new ObjectParameter("platoID", platoID) :
                new ObjectParameter("platoID", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("descripcion", descripcion) :
                new ObjectParameter("descripcion", typeof(string));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("precio", precio) :
                new ObjectParameter("precio", typeof(decimal));
    
            var fotografiaParameter = fotografia != null ?
                new ObjectParameter("fotografia", fotografia) :
                new ObjectParameter("fotografia", typeof(byte[]));
    
            var habilitadoParameter = habilitado != null ?
                new ObjectParameter("habilitado", habilitado) :
                new ObjectParameter("habilitado", typeof(string));
    
            var tiempoPreparacionParameter = tiempoPreparacion.HasValue ?
                new ObjectParameter("tiempoPreparacion", tiempoPreparacion) :
                new ObjectParameter("tiempoPreparacion", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PROC_MODIFICAR_PLATO", platoIDParameter, nombreParameter, descripcionParameter, precioParameter, fotografiaParameter, habilitadoParameter, tiempoPreparacionParameter);
        }
    
        public virtual int PROC_RELACION_PLATO_ORDEN(Nullable<int> iDPlato, ObjectParameter contador)
        {
            var iDPlatoParameter = iDPlato.HasValue ?
                new ObjectParameter("IDPlato", iDPlato) :
                new ObjectParameter("IDPlato", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PROC_RELACION_PLATO_ORDEN", iDPlatoParameter, contador);
        }
    
        public virtual ObjectResult<proc_search_user_Result> proc_search_user(string nombre)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_search_user_Result>("proc_search_user", nombreParameter);
        }
    
        public virtual int PROC_SET_TIMES_TO_ORDERS(Nullable<int> orderID, Nullable<System.DateTime> dateTimeNow)
        {
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("orderID", orderID) :
                new ObjectParameter("orderID", typeof(int));
    
            var dateTimeNowParameter = dateTimeNow.HasValue ?
                new ObjectParameter("dateTimeNow", dateTimeNow) :
                new ObjectParameter("dateTimeNow", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PROC_SET_TIMES_TO_ORDERS", orderIDParameter, dateTimeNowParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
